openapi: 3.0.3
info:
  title: Bingo API
  description: ""
  version: "1.0.0"
servers:
  - url: http://localhost:8080/v1
    description: dev
tags:
  - name: User
    description: Operations about user
  - name: Post
    description: Operations about post
paths:
  # Login
  /login:
    post:
      tags:
        - User
      summary: Log into the system
      description: ""
      operationId: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /users:
    # Get user list
    get:
      tags:
        - User
      summary: List users
      operationId: ListUsers
      security:
        - api_key: [ ]
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserResponse'
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    # Create user
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: CreateUser
      requestBody:
        description: Create user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /users/{name}:
    # Get user
    get:
      tags:
        - User
      summary: Get user by user name
      description: ""
      operationId: GetUser
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    # Update user
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: UpdateUser
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
          description: Updated user object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    # Delete user
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: DeleteUser
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  # Change password
  /users/{name}/change-password:
    put:
      tags:
        - User
      summary: Change password
      description: Change password
      operationId: ChangePassword
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: name that need to be Updated
          required: true
          schema:
            type: string
      requestBody:
          description: Updated user object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  # Posts
  /posts:
    # List
    get:
      tags:
        - Post
      summary: List posts
      operationId: ListPosts
      security:
        - api_key: [ ]
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostResponse'
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    post:
      tags:
        - Post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: CreatePost
      security:
        - api_key: [ ]
      requestBody:
          description: Created user object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePostRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    # Delete posts
    delete:
      tags:
        - Post
      summary: Delete posts
      description: Delete posts
      operationId: DeletePosts
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              example: post-22z9jl
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /posts/{postID}:
    # Get post
    get:
      tags:
        - Post
      summary: Get post
      description: ""
      operationId: GetPost
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostInfo"
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    # Update post
    put:
      tags:
        - Post
      summary: Updated post
      description: This can only be done by the logged in post.
      operationId: UpdatePost
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: path
          description: postID
          required: true
          schema:
            type: string
      requestBody:
          description: Updated post
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePostRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

    # Delete post
    delete:
      tags:
        - Post
      summary: Delete post
      description: Delete post
      operationId: DeletePost
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Request failed due to client-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        "500":
          description: Request failed due to server-side problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    # Error
    ErrResponse:
      type: object
      properties:
        code:
          type: integer
          format: string
          example: ResourceNotFound.PageNotFound/InternalError
        message:
          type: string
          example: Page not found./Internal server error.

    # Login request
    LoginRequest:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: test
        password:
          type: string
          format: password
          example: 123123

    # Login response
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: xxx.yyy.zzz

    # List user response
    ListUserResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
          example: 3
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'

    # Create user request
    CreateUserRequest:
      required:
        - username
        - password
        - nickname
        - email
        - phone
      type: object
      properties:
        username:
          type: string
          example: test
        password:
          type: string
          format: password
          example: 123123
        nickname:
          type: string
          example: test
        email:
          type: string
          format: email
        phone:
          type: string
          example: 18888888888

    # User info
    UserInfo:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        nickname:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          example: 18888888888
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Update user request
    UpdateUserRequest:
      type: object
      properties:
        nickname:
          type: string
          example: test
        email:
          type: string
          format: email
        phone:
          type: string
          example: 18888888888

    # Change password
    ChangePasswordRequest:
      required:
        - oldPassword
        - newPassword
      type: object
      properties:
        oldPassword:
          type: string
          format: password
          example: 123123
        newPassword:
          type: string
          format: password
          example: 123123

    # Post info
    PostInfo:
      type: object
      properties:
        username:
          type: string
          example: test
        postID:
          type: string
          example: post-22z9jl
        title:
          type: string
          example: 'blog title'
        content:
          type: string
          example: "This is the content of the blog"
        createdAt:
          type: string
          format: date-time
          example: 2023-01-25 00:00:00
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-25 00:00:00

    # List response
    ListPostResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
          example: 3
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostInfo'

    # Create post request
    CreatePostRequest:
      required:
        - title
        - content
      type: object
      properties:
        title:
          type: string
          example: 'blog'
        content:
          type: string
          example: "This is the content"

    # Create post response
    CreatePostResponse:
      type: object
      properties:
        postID:
          type: string
          example: post-22z9jl

    # Update post request
    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Updated blog'
        content:
          type: string
          example: "This is the updated content"
